# -*- coding: utf-8 -*-
"""transfer_catVsDog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11wA7ftKt43eQJAQZ8jpWPpBld82PxEiB
"""

import urllib.request
import os
import zipfile
import random

import tensorflow as tf
from tensorflow import keras as ks
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras import layers, Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
from shutil import copyfile
import matplotlib.pyplot as plt
import cv2 as cv
import numpy as np
import warnings

data_path='/content/drive/MyDrive/Colab Notebooks/Datasets/Pet-Images'
cat_src_dir = '/content/drive/MyDrive/Colab Notebooks/Datasets/Pet-Images/Cat'
dog_src_dir = '/content/drive/MyDrive/Colab Notebooks/Datasets/Pet-Images/Dog'

def resize_img(data_path):
    for filename in os.listdir(data_path):
        try:
            img = plt.imread(os.path.join(data_path, filename))
            img = cv.resize(img, (150, 150))
            img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
            cv.imwrite(data_path+filename, img)
        except:
            continue

resize_img(cat_src_dir)
resize_img(dog_src_dir)

next_cat_pic = [os.path.join(cat_src_dir, fname) for fname in random.sample(os.listdir(cat_src_dir), 5)]
next_dog_pic = [os.path.join(dog_src_dir, fname) for fname in random.sample(os.listdir(dog_src_dir), 5)]

plt.figure(figsize=(25,10))
for i, img_path in enumerate(next_cat_pic + next_dog_pic):
    ax = plt.subplot(2, 5, i+1)
    ax.axis('off')
    img = plt.imread(img_path)
    plt.imshow(img)

gpus = tf.config.experimental.list_logical_devices('GPU')
strategy = tf.distribute.MirroredStrategy([gpu.name for gpu in gpus])
print('running on single gpu')

train_datagen = ImageDataGenerator(
    rescale=1/255.0, 
    rotation_range=40, 
    width_shift_range=0.2, 
    height_shift_range=0.2, 
    shear_range=0.2, 
    zoom_range=0.2, 
    horizontal_flip=True, 
    fill_mode='nearest'
)

validation_datagen = ImageDataGenerator(rescale=1/255.0)



training_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Colab Notebooks/Datasets/Pet-Images', 
    batch_size=100, 
    class_mode='binary', 
    target_size=(150, 150)
)

validation_generator = validation_datagen.flow_from_directory(
    '/content/drive/MyDrive/Colab Notebooks/Datasets/Pet-Images', 
    batch_size=100, 
    class_mode='binary', 
    target_size=(150, 150)
)

weights_url = 'https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'
weights_file = 'inception_v3.h5'
urllib.request.urlretrieve(weights_url, weights_file)

with strategy.scope():
    pre_trained_model = InceptionV3(
        input_shape=(150, 150, 3), 
        include_top=False, 
        weights=None
    )
    pre_trained_model.load_weights(weights_file)

    for layer in pre_trained_model.layers:
        layer.trainable = False
    last_layer = pre_trained_model.get_layer('mixed7')
    print(last_layer.output_shape)
    last_output = last_layer.output

def model(inputs):
    x = layers.Flatten()(inputs)
    x = layers.Dense(1024, activation='relu')(x)
    x = layers.Dense(1, activation='sigmoid')(x)
    model = Model(pre_trained_model.input, x)
    return model

with strategy.scope():
    model = model(last_output)
    model.compile(optimizer=ks.optimizers.RMSprop(learning_rate=0.0001), loss='binary_crossentropy', metrics=['acc'])

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if (logs.get('acc')>0.99):
            print('\nReached 99% accuracy so cancelling training')
            self.model.stop_training = True

callbacks = myCallback()

history= model.fit(training_generator, validation_data=validation_generator, epochs=10, verbose=1, callbacks=[callbacks])

def predict_class(filename, model, ax):
    img = load_img(filename, target_size=(150, 150))
    image = plt.imread(filename)
    image = cv.resize(image, (200, 200))
    ax.imshow(image)
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    img = img_to_array(img)
    img = img.reshape(1, 150, 150, 3)
    img = img.astype('float32')/255.0
    result = model.predict(img)
    if result[0][0] > 0.9:
        ax.set_title('Dog | Score: ' + str(result[0][0]))
    else:
        ax.set_title('Cat | Score: ' + str(result[0][0]))

def urler(url, ax):
    resource = urllib.request.urlopen(url)
    output = open('file.jpg', 'wb')
    output.write(resource.read())
    output.close()
    predict_class('file.jpg', model, ax)

url_list = [
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS3bCwUCJW0BlgvKzh5KvHTdbOQ3wGPcEUnMQ&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRviwTGt6wboCe9ajzBJDy4aJ19NmhNv4dg2g&usqp=CAU',
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRfNrh7pE_rneJlr31AhoLaGtZdX2qCBKV-EA&usqp=CAU',
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9FhF-KCQL_pRcCYyOHlaWzYOL03QnvANbfw&usqp=CAU',
    'https://s3.ap-southeast-1.amazonaws.com/images.deccanchronicle.com/dc-Cover-kg8a727q0cuucunk15mpfv2uv2-20170725190600.Medi.jpeg',
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNDH6Ggz1lwkaBTC4r3RqeF6KYTHuBNFE-bg&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMFelkjsaJRYkSCRybp9szEDULwDffMKR-3g&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxYAKQt_C0roPUU2-VYx6I_YKseX3hyOauQw&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRF8L1kksXIdsHlKTXyMHPCTfaxcu0CE9fIC2CX3Z4pO0mfKTv-n6d7FN-z6Rvlvs_AfwI&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRa__d0RbzBPaQrkrlg1E6ZLnz1EVHVB4dTMQ&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSEZ4n6vaYSFi8wNK1xNwiUNx969vRI7iS_A55O66dIdXNH2lxJSFTMwxjE-a-V2yyZAxA&usqp=CAU',  
    'https://www.pinkvilla.com/files/styles/amp_metadata_content_image_min_696px_wide/public/alia_bhatt_bids_goodbye_to_her_cat_sheeba_as_the_feline_passes_away_.jpg?itok=dNAseG1R', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT-k5F8HSK60Iwwj-x_kFFCg6anSVzWD_QFbA&usqp=CAU', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2Zvsf9hVwYoI3JbCwnZvnI5Cjbjk76a74YA&usqp=CAU', 
    'https://blog.mystart.com/wp-content/uploads/shutterstock_288913766-e1551281043329.jpg', 
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4pbDrhn-j_GvNBSIRA3ZZwOGa8etrh4qJ7YXGRg-FzwAyujZuKyP_2VHZMToV6HJy4XA&usqp=CAU'
    
]

n = 0
fig = plt.figure(figsize=(22, 20))
axs = fig.subplots(4, 4)
for i in range(4):
    urler(url_list[n+0], axs[i, 0])
    urler(url_list[n+1], axs[i, 1])
    urler(url_list[n+2], axs[i, 2])
    urler(url_list[n+3], axs[i, 3])
    n += 4
plt.tight_layout()
plt.show()