# -*- coding: utf-8 -*-
"""diff_opti.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1szo3lxlWOOf2u8Ar2SMvES3mRKKfDl90
"""

from tensorflow import keras
from keras import models, Input, layers

import pandas as pd
import numpy as np

import sklearn
from sklearn.model_selection import train_test_split

#Download weatherAus.csv dataset
!wget https://raw.githubusercontent.com/gchoi/Dataset/master/weatherAUS.csv

pd.options.display.max_columns=50
df=pd.read_csv('/content/weatherAUS.csv')

df['RainTodayFlag']=df['RainToday'].apply(lambda x:1 if x=='Yes' else 0)
df['RainTomorrowFlag']=df['RainTomorrow'].apply(lambda x: 1 if x=='Yes' else 0)

X=df[['Humidity3pm']]
y=df[['RainTomorrowFlag']].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model=models.Sequential([
        layers.Dense(2, activation='softplus', name='Hidden-Layer'), 
        layers.Dense(1, activation='sigmoid', name='Output-Layer'),   
    ]) 
model.add(Input(shape=(1,), name='Input-Layer'))

model1=model

model1.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['Accuracy'])
model1.fit(X_train, y_train, epochs=3, batch_size=10,)
model1.summary()
scores = model1.evaluate(X_test,
                        y_test,
                        batch_size=10,
                        verbose=False)
print('Test loss:', scores[0])
print('Test accuracy: %0.1f%%' % (100 * scores[1]))

model2=model

model2.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['Accuracy'])
model2.fit(X_train, y_train, epochs=3, batch_size=10,)
model2.summary()
scores = model2.evaluate(X_test,
                        y_test,
                        batch_size=10,
                        verbose=False)
print('Test loss:', scores[0])
print('Test accuracy: %0.1f%%' % (100 * scores[1]))

model3=model

model3.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['Accuracy'])
model3.fit(X_train, y_train, epochs=3, batch_size=10,)
model3.summary()
scores = model3.evaluate(X_test,
                        y_test,
                        batch_size=10,
                        verbose=False)
print('Test loss:', scores[0])
print('Test accuracy: %0.1f%%' % (100 * scores[1]))